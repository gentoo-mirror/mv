--- src/portage/mask_list.cc
+++ src/portage/mask_list.cc
@@ -61,7 +61,7 @@
 	}
 	bool had_mask(false);
 	bool had_unmask(false);
-	for(typename Get::const_iterator it(masks->begin());
+	for(Get::const_iterator it(masks->begin());
 		likely(it != masks->end()); ++it) {
 		it->checkMask(*p, check);
 		switch(it->get_type())
@@ -108,7 +108,7 @@
 	if(masks == NULL) {
 		return;
 	}
-	for(typename Get::const_iterator it(masks->begin());
+	for(Get::const_iterator it(masks->begin());
 		likely(it != masks->end()); ++it) {
 		it->apply(v, false, false, Keywords::RED_NOTHING);
 	}
@@ -129,7 +129,7 @@
 		if(masks == NULL) {
 			continue;
 		}
-		for(typename Get::const_iterator it(masks->begin());
+		for(Get::const_iterator it(masks->begin());
 			likely(it != masks->end()); ++it) {
 			it->applyVirtual(*p);
 		}
--- src/portage/mask_list.h
+++ src/portage/mask_list.h
@@ -211,7 +211,7 @@
 class PreListOrderEntry : public std::vector<std::string>
 {
 public:
-	typedef typename std::vector<std::string> super;
+	typedef std::vector<std::string> super;
 	typedef super::const_iterator const_iterator;
 	using super::begin;
 	using super::end;
@@ -243,8 +243,8 @@
 class PreList : public std::vector<PreListEntry>
 {
 public:
-	typedef typename std::vector<PreListEntry> super;
-	typedef typename super::const_iterator const_iterator;
+	typedef std::vector<PreListEntry> super;
+	typedef super::const_iterator const_iterator;
 	using super::begin;
 	using super::end;
 	using super::size;
